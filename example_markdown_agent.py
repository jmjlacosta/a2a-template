#!/usr/bin/env python3
"""
Example agent demonstrating proper artifact creation with markdown handling.
CRITICAL: Shows how markdown content is ALWAYS sent as TextPart, not FilePart.
"""

import asyncio
from typing import Dict, Any, Union, List
from base import A2AAgent


class MarkdownReportAgent(A2AAgent):
    """
    Example agent that generates markdown reports as artifacts.
    Demonstrates the CRITICAL requirement: Markdown is always TextPart.
    """
    
    def get_agent_name(self) -> str:
        return "Markdown Report Agent"
    
    def get_agent_description(self) -> str:
        return "Generates analysis reports in markdown format with proper artifact handling"
    
    async def process_message(self, message: str) -> Union[str, Dict[str, Any], List[Any]]:
        """
        Process the message and generate a markdown report.
        
        The base class will automatically create an artifact from the returned content.
        Since we return a string that looks like markdown, it will be properly
        handled as TextPart with content type detection.
        """
        
        # Parse the user's request
        analysis_topic = message.strip() or "General Analysis"
        
        # Generate a markdown report
        markdown_report = f"""# Analysis Report: {analysis_topic}

## Executive Summary
This report provides a comprehensive analysis of **{analysis_topic}** with key findings and recommendations.

## Key Findings
1. **Finding 1**: Important discovery about the topic
   - Supporting detail A
   - Supporting detail B
   
2. **Finding 2**: Another significant observation
   - Evidence point 1
   - Evidence point 2

## Data Analysis
```python
# Sample code showing analysis
data = analyze_topic("{analysis_topic}")
results = process_data(data)
print(f"Analysis complete: {{results}}")
```

## Recommendations
- [ ] Action item 1: Implement suggested changes
- [ ] Action item 2: Review additional data
- [x] Action item 3: Initial analysis completed

## Conclusion
The analysis of {analysis_topic} reveals significant insights that can drive strategic decisions.

---
*Report generated by {self.get_agent_name()}*
"""
        
        # Return the markdown report
        # The base class will:
        # 1. Detect this as markdown content
        # 2. Create a TextPart (NOT FilePart) 
        # 3. Add proper metadata with contentType: "text/markdown"
        return markdown_report


class MultiArtifactAgent(A2AAgent):
    """
    Example agent that demonstrates creating multiple artifacts with different types.
    Shows proper handling of markdown, JSON, and plain text.
    """
    
    def get_agent_name(self) -> str:
        return "Multi-Artifact Agent"
    
    def get_agent_description(self) -> str:
        return "Creates multiple artifacts of different types to demonstrate proper Part handling"
    
    async def execute(self, context, event_queue):
        """
        Override execute to create multiple artifacts.
        This demonstrates advanced artifact creation patterns.
        """
        from a2a.server.tasks import TaskUpdater
        from a2a.types import TaskState
        from a2a.utils import new_agent_text_message
        import time
        
        # Get the task and message
        task = context.current_task
        message = self._extract_message(task)
        
        # Create task updater
        context_id = getattr(task, "contextId", None) or getattr(task, "context_id", None) or task.id
        updater = TaskUpdater(event_queue, task.id, context_id)
        
        # Update status
        await updater.update_status(
            TaskState.working,
            new_agent_text_message("Creating multiple artifacts...")
        )
        
        # Create markdown artifact
        markdown_content = """# Multi-Artifact Report

## Overview
This demonstrates creating multiple artifacts with proper type handling.

### Key Points
- Markdown is ALWAYS TextPart
- JSON data can be TextPart or DataPart
- Binary files are FilePart
"""
        
        await self.create_artifact(
            content=markdown_content,
            updater=updater,
            artifact_name="Markdown Report",
            artifact_description="A report in markdown format",
            artifact_id="markdown-report",
            filename="report.md"  # This triggers markdown detection
        )
        
        # Create JSON artifact (as structured data)
        json_data = {
            "status": "success",
            "timestamp": time.time(),
            "metrics": {
                "processed": 100,
                "errors": 0,
                "performance": "optimal"
            }
        }
        
        await self.create_artifact(
            content=json_data,
            updater=updater,
            artifact_name="Analysis Metrics",
            artifact_description="Structured metrics data",
            artifact_id="metrics-data"
            # No filename - will be DataPart or TextPart based on content
        )
        
        # Create plain text artifact
        text_content = "This is plain text content.\nIt will be sent as TextPart."
        
        await self.create_artifact(
            content=text_content,
            updater=updater,
            artifact_name="Text Summary",
            artifact_description="Plain text summary",
            artifact_id="text-summary"
        )
        
        # Mark task as completed
        await updater.update_status(
            TaskState.completed,
            new_agent_text_message("Created 3 artifacts demonstrating proper Part type handling")
        )


def main():
    """Run example agents."""
    import sys
    
    # Choose which agent to run
    if len(sys.argv) > 1 and sys.argv[1] == "multi":
        print("Starting Multi-Artifact Agent...")
        agent = MultiArtifactAgent()
    else:
        print("Starting Markdown Report Agent...")
        agent = MarkdownReportAgent()
    
    # Run the agent
    print(f"Agent: {agent.get_agent_name()}")
    print(f"Description: {agent.get_agent_description()}")
    print("\nAgent running on http://localhost:8000")
    print("Send a message to generate artifacts with proper Part types!")
    
    agent.run(port=8000)


if __name__ == "__main__":
    main()